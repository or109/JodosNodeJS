{
  "author": {
    "name": "Brian Carr",
    "email": "bcarr14@gmail.com"
  },
  "name": "wordsworth",
  "description": "Spell-checker / spelling correcter module.",
  "version": "0.1.0",
  "repository": {
    "type": "git",
    "url": "http://github.com/mrmarbles/wordsworth.git"
  },
  "main": "index",
  "engines": {
    "node": "*"
  },
  "dependencies": {
    "line-reader": "0.2.3"
  },
  "devDependencies": {
    "mocha": ">=1.0.0",
    "should": ">=0.6.0"
  },
  "scripts": {
    "test": "mocha test/ --reporter spec"
  },
  "contributors": [
    {
      "name": "Brian Carr",
      "email": "bcarr14@gmail.com"
    },
    {
      "name": "Erel Segal-Halevi",
      "email": "erelsgl@gmail.com"
    }
  ],
  "keywords": [
    "spelling",
    "spell-check",
    "spell check",
    "spell",
    "check",
    "spell correction",
    "dictionary",
    "words"
  ],
  "license": "MIT",
  "readme": "wordsworth\r\n=========\r\n\r\nSpell-checker / spelling correcter module for Nodejs based off of Peter Norvig's\r\nspelling corrector publication (http://norvig.com/spell-correct.html) and John Resig's\r\ninstructions on string-based binary searching (http://ejohn.org/blog/revised-javascript-dictionary-search/).\r\n\r\nInstallation\r\n=========\r\n     npm install wordsworth\r\n\r\nUse\r\n=========\r\n\r\nAsynchronous Initialization\r\n---------\r\n\r\nThe sample `/data/en_US/seed.txt` and `/data/en_US/training.txt` files are fairly large and as such have\r\nbeen compressed and provided in an archive located in `/data/`.  To run the examples, extract\r\nthe contents of the archive into `/en_US`.\r\n\r\n    var sp = require('wordsworth').getInstance();\r\n\r\n    sp.initialize(\r\n\r\n      '../data/en_US/seed.txt',\r\n      '../data/en_US/training.txt', function() {\r\n\r\n        console.log('Initialized!');\r\n\r\n        // indicates whether or not the spell-checker knows the given word\r\n        console.log(sp.exists('hello'));\r\n        console.log(sp.exists('polymorphism'));\r\n\r\n        /**\r\n         * Accepts a single word and will return an ordered Array, most probable to\r\n         * least probable, of suggested spelling corrections IF the given word has been\r\n         * mis-spelled.\r\n         */\r\n        console.log(sp.suggest('polymrphism'));\r\n\r\n        /**\r\n         * Will return an Object containing keys representing any misspelled\r\n         * words in the provided text along with an ordered Array of potential\r\n         * spelling corrections for each key.\r\n         */\r\n        console.log(sp.analyze('This sentense will havv a fiw speling errorrs.'));\r\n\r\n      }\r\n    );\r\n\r\nSynchronous Initialization\r\n---------\r\n\r\n    var sp = require('wordsworth').getInstance();\r\n\r\n    var seeds = ['one', 'two', 'three']; // language dictionary, one word per array index\r\n    var training = [\r\n        'large amounts of training text',\r\n        'ideally one sentence per array index'\r\n    ];\r\n\r\n    sp.initializeSync(seeds, training);\r\n    sp.exists('one');\r\n    sp.suggest('some mis-spelled word');\r\n\r\n\r\nTesting\r\n=========\r\n    npm test\r\n\r\nContributors\r\n=========\r\n* [mrmarbles](http://github.com/mrmarbles)\r\n* [erelsgl](http://github.com/erelsgl)\r\n\r\nlicense\r\n-------\r\n[MIT License](http://mrmarbles.mit-license.org/ \"Mit License\")",
  "readmeFilename": "README.md",
  "_id": "wordsworth@0.1.0",
  "dist": {
    "shasum": "902345d903ebe449e5684cc7afc88d8e13a2b4cd",
    "tarball": "http://registry.npmjs.org/wordsworth/-/wordsworth-0.1.0.tgz"
  },
  "_from": "wordsworth@*",
  "_npmVersion": "1.2.14",
  "_npmUser": {
    "name": "mrmarbles",
    "email": "bcarr14@gmail.com"
  },
  "maintainers": [
    {
      "name": "mrmarbles",
      "email": "bcarr14@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "902345d903ebe449e5684cc7afc88d8e13a2b4cd",
  "_resolved": "https://registry.npmjs.org/wordsworth/-/wordsworth-0.1.0.tgz"
}
